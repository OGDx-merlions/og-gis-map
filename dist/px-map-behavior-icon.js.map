{"version":3,"sources":["px-map-behavior-icon.es6.js"],"names":["window","PxMap","StaticIcon","settings","icon","createIcon","type","styleScope","color","className","_generateStaticIconClasses","customStyleBackground","customStyleBorder","html","iconSize","L","point","iconAnchor","popupAnchor","options","divIcon","classes","length","push","join","SymbolIcon","stroke","fill","strokeWidth","_generateSymbolIconClasses","ClusterIcon","count","countByType","colorsByType","containerSize","pathSize","borderSize","chartSize","svg","_generateClusterIconSVG","typeKeys","Object","keys","typeObjs","map","sort","a","b","types","colors","i","len","total","createPieChart","groupsArray","colorsArray","pieGeneratorFn","Px","d3","pie","arcData","radius","innerRadius","arcPathGeneratorFn","arc","outerRadius","pathListTmpl","paths","pathTmpl","pathData","pathIndex"],"mappings":"wpBAAA;;;;;;;;;;;;;;;GAiBA,CAAC,UAAW,CACV,aAEA;;gFAIA,4CACAA,OAAOC,KAAP,CAAgBD,OAAOC,KAAP,EAAgB,EAAhC,CAEA;;;KAVU,GAcJC,WAdI,YAeR,qBAAyB,IAAbC,SAAa,2DAAJ,EAAI,kCACvB,KAAKC,IAAL,CAAY,KAAKC,UAAL,CAAgBF,QAAhB,CAAZ,CACA,MAAO,MAAKC,IACb,CAlBO,sEAoBgB,IAAbD,SAAa,2DAAJ,EAAI,CACtB;AADsB,mBAEmBA,QAFnB,CAEhBG,IAFgB,CAEhBA,IAFgB,4BAEX,MAFW,gBAEHC,UAFG,CAEmBJ,QAFnB,CAEHI,UAFG,CAESC,KAFT,CAEmBL,QAFnB,CAESK,KAFT,CAItB,GAAMC,WAAY,KAAKC,0BAAL,CAAgCJ,IAAhC,CAAsCC,UAAtC,CAAlB,CAEA,GAAII,uBAAwB,EAA5B,CACA,GAAIC,mBAAoB,EAAxB,CAEA,GAAIJ,KAAJ,CAAW,CACTG,2CAA6CH,KAA7C,KACAI,mCAAqCJ,KAArC,4BACD,CAED;AACA,GAAMK,6GAEwCF,qBAFxC,mEAG6CC,iBAH7C,mFAAN,CAOA,GAAME,UAAWC,EAAEC,KAAF,CAAQ,EAAR,CAAW,EAAX,CAAjB,CACA,GAAMC,YAAaF,EAAEC,KAAF,CAAQ,GAAR,CAAa,EAAb,CAAnB,CACA,GAAME,aAAcH,EAAEC,KAAF,CAAQ,CAAR,CAAU,CAAC,EAAX,CAApB,CAEA;AACA,GAAMG,SAAU,CACdV,mBADc,CAEdI,SAFc,CAGdC,iBAHc,CAIdG,qBAJc,CAKdC,uBALc,CAAhB,CAQA,MAAOH,GAAEK,OAAF,CAAUD,OAAV,CACR,CAxDO,8EA0DmBb,IA1DnB,CA0DyBC,UA1DzB,CA0DqC,CAC3C,GAAMc,SAAU,CAAC,UAAD,CAAa,iBAAb,CAAgC,6BAAhC,CAAhB,CACA,GAAIf,MAAQA,KAAKgB,MAAjB,CAAyB,CACvBD,QAAQE,IAAR,qBAAiCjB,IAAjC,CACD,CACD,GAAIC,UAAJ,CAAgB,CACdc,QAAQE,IAAR,CAAahB,UAAb,CACD,CACD,MAAOc,SAAQG,IAAR,CAAa,GAAb,CACR,CAnEO,yBAoET,CACD,2BACAvB,MAAMC,UAAN,CAAmBA,UAAnB,CAEA;;;KAxEU,GA4EJuB,WA5EI,YA6ER,qBAAyB,IAAbtB,SAAa,2DAAJ,EAAI,kCACvB,KAAKC,IAAL,CAAY,KAAKC,UAAL,CAAgBF,QAAhB,CAAZ,CACA,MAAO,MAAKC,IACb,CAhFO,sEAkFgB,IAAbD,SAAa,2DAAJ,EAAI,qBACkGA,QADlG,CAChBG,IADgB,CAChBA,IADgB,6BACX,MADW,gCACkGH,QADlG,CACHC,IADG,CACHA,IADG,4BACE,iBADF,gBACqBG,UADrB,CACkGJ,QADlG,CACqBI,UADrB,kBACkGJ,QADlG,CACiCuB,MADjC,CACiCA,MADjC,8BACwC,cADxC,iCACkGvB,QADlG,CACwDwB,IADxD,CACwDA,IADxD,4BAC6D,MAD7D,sCACkGxB,QADlG,CACqEyB,WADrE,CACqEA,WADrE,mCACiF,KADjF,uBACwFpB,KADxF,CACkGL,QADlG,CACwFK,KADxF,CAEtB,GAAMC,WAAY,KAAKoB,0BAAL,CAAgCvB,IAAhC,CAAsCC,UAAtC,CAAlB,CAEA,GAAII,uBAAwB,EAA5B,CACA,GAAIC,mBAAoB,EAAxB,CAEA,GAAIJ,KAAJ,CAAW,CACTG,2CAA6CH,KAA7C,KACAI,mCAAqCJ,KAArC,4BACD,CAED;AACA,GAAMK,yGAEsCF,qBAFtC,8HAIiBP,IAJjB,oBAIwCsB,MAJxC,WAIwDC,IAJxD,4CAIuGC,WAJvG,uGAO2ChB,iBAP3C,+EAAN,CAYA,GAAME,UAAWC,EAAEC,KAAF,CAAQ,EAAR,CAAW,EAAX,CAAjB,CACA,GAAMC,YAAaF,EAAEC,KAAF,CAAQ,IAAR,CAAc,EAAd,CAAnB,CACA,GAAME,aAAcH,EAAEC,KAAF,CAAQ,CAAR,CAAU,CAAC,EAAX,CAApB,CAEA;AACA,GAAMG,SAAU,CACdV,mBADc,CAEdI,SAFc,CAGdC,iBAHc,CAIdG,qBAJc,CAKdC,uBALc,CAAhB,CAQA,MAAOH,GAAEK,OAAF,CAAUD,OAAV,CACR,CAzHO,8EA2HmBb,IA3HnB,CA2HyBC,UA3HzB,CA2HqC,CAC3C,GAAMc,SAAU,CAAC,UAAD,CAAa,iBAAb,CAAgC,6BAAhC,CAAhB,CACA,GAAIf,MAAQA,KAAKgB,MAAjB,CAAyB,CACvBD,QAAQE,IAAR,qBAAiCjB,IAAjC,CACD,CACD,GAAIC,UAAJ,CAAgB,CACdc,QAAQE,IAAR,CAAahB,UAAb,CACD,CACD,MAAOc,SAAQG,IAAR,CAAa,GAAb,CACR,CApIO,yBAqIT,CACD,2BACAvB,MAAMwB,UAAN,CAAmBA,UAAnB,CAEA;;;KAzIU,GA6IJK,YA7II,YA8IR,sBAAyB,IAAb3B,SAAa,2DAAJ,EAAI,mCACvB,KAAKC,IAAL,CAAY,KAAKC,UAAL,CAAgBF,QAAhB,CAAZ,CACA,MAAO,MAAKC,IACb,CAjJO,uEAmJgB,IAAbD,SAAa,2DAAJ,EAAI,CACtB;AADsB,GAEd4B,MAFc,CAE8F5B,QAF9F,CAEd4B,KAFc,CAEPC,WAFO,CAE8F7B,QAF9F,CAEP6B,WAFO,CAEMC,YAFN,CAE8F9B,QAF9F,CAEM8B,YAFN,uBAE8F9B,QAF9F,CAEoB+B,aAFpB,CAEoBA,aAFpB,mCAEkC,EAFlC,0CAE8F/B,QAF9F,CAEsCgC,QAFtC,CAEsCA,QAFtC,gCAE+C,EAF/C,yCAE8FhC,QAF9F,CAEmDiC,UAFnD,CAEmDA,UAFnD,kCAE8D,CAF9D,0CAE8FjC,QAF9F,CAEiEM,SAFjE,CAEiEA,SAFjE,iCAE2E,EAF3E,qBAE+EF,UAF/E,CAE8FJ,QAF9F,CAE+EI,UAF/E,CAItB;AACA;AACA,GAAM8B,WAAaH,eAAiBE,WAAa,CAAb,CAAkBA,WAAW,CAAZ,CAAe,GAAhC,CAAsC,CAAvD,CAAnB,CAEA;AACA,GAAMtB,UAAWC,EAAEC,KAAF,CAAQkB,aAAR,CAAuBA,aAAvB,CAAjB,CAEA;AACA,GAAMI,KAAM,KAAKC,uBAAL,CAA6BP,WAA7B,CAA0CC,YAA1C,CAAwDI,SAAxD,CAAmEF,QAAnE,CAAZ,CAEA;AACA,GAAMd,8BAA8BZ,WAAW,EAAzC,OAA+CF,YAAY,EAA3D,CAAN,CACA,GAAMM,0EACqDqB,aADrD,gBACiFA,aADjF,qDAEiCI,GAFjC,wDAGoCP,KAHpC,iCAAN,CAOA;AACA,GAAMZ,SAAU,CACdL,SAAUA,QADI,CAEdL,UAAWY,OAFG,CAGdR,KAAMA,IAHQ,CAAhB,CAMA,MAAOE,GAAEK,OAAF,CAAUD,OAAV,CACR,CAlLO,wEAoLgBa,WApLhB,CAoL6BC,YApL7B,CAoL2CI,SApL3C,CAoLsDF,QApLtD,CAoLgE,CACtE;AACA;AACA,GAAMK,UAAWC,OAAOC,IAAP,CAAYV,WAAZ,CAAjB,CACA,GAAMW,UAAWH,SAASI,GAAT,CAAa,qBAAS,CAAEtC,KAAMA,IAAR,CAAcyB,MAAOC,YAAY1B,IAAZ,CAArB,CAAwCE,MAAOyB,aAAa3B,IAAb,CAA/C,CAAT,CAAb,CAAjB,CAEA;AACAqC,SAASE,IAAT,CAAc,SAACC,CAAD,CAAGC,CAAH,QAASD,GAAEf,KAAF,CAAUgB,EAAEhB,KAArB,CAAd,EAEA;AACA,GAAMiB,OAAQ,EAAd,CACA,GAAMC,QAAS,EAAf,CACA,GAAIC,SAAJ,CAAOC,UAAP,CAAY7C,WAAZ,CAAkB8C,YAAlB,CACA,IAAKF,EAAE,CAAF,CAAKC,IAAIX,SAASlB,MAAvB,CAA+B4B,EAAEC,GAAjC,CAAsCD,GAAtC,CAA2C,CACzC5C,KAAOkC,SAASU,CAAT,CAAP,CACAE,MAAQpB,YAAY1B,IAAZ,CAAR,CACA0C,MAAMzB,IAAN,CAAWS,YAAY1B,IAAZ,CAAX,EACA2C,OAAO1B,IAAP,CAAYU,aAAa3B,IAAb,CAAZ,CACD,CAED;AACA,MAAO,MAAK+C,cAAL,CAAoBL,KAApB,CAA2BC,MAA3B,CAAmCZ,SAAnC,CAA8CF,QAA9C,CACR,CA1MO,sDA4MOmB,WA5MP,CA4MoBC,WA5MpB,CA4MiClB,SA5MjC,CA4M4CF,QA5M5C,CA4MsD,CAC5D;AACA;AACA,GAAMqB,gBAAiBC,GAAGC,EAAH,CAAMC,GAAN,EAAvB,CACA,GAAMC,SAAUJ,eAAeF,WAAf,CAAhB,CAEA;AACA,GAAMO,QAAUxB,UAAY,CAA5B,CACA,GAAMyB,aAAeD,OAAS1B,QAA9B,CAEA;AACA;AACA;AACA,GAAM4B,oBAAqBN,GAAGC,EAAH,CAAMM,GAAN,GAAYC,WAAZ,CAAwBJ,MAAxB,EAAgCC,WAAhC,CAA4CA,WAA5C,CAA3B,CAEA;AACA,GAAMI,cAAe,QAAfA,aAAe,CAACC,KAAD,QAAWA,OAAMvB,GAAN,CAAUwB,QAAV,EAAoB5C,IAApB,CAAyB,EAAzB,CAAX,CAArB,CAEA;AACA,GAAM4C,UAAW,QAAXA,SAAW,CAACC,QAAD,CAAWC,SAAX,oBAAqCP,mBAAmBM,QAAnB,CAArC,YAA4Ed,YAAYe,SAAZ,CAA5E,yBAAjB,CAEA,iHACkGjC,SADlG,KAC+GA,SAD/G,4CAEgCwB,MAFhC,MAE2CA,MAF3C,yBAGYK,aAAaN,OAAb,CAHZ,6CAOD,CAxOO,0BAyOT,CACD,4BACA3D,MAAM6B,WAAN,CAAoBA,WACrB,CA5OD","file":"px-map-behavior-icon.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018, General Electric\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /****************************************************************************\n   * KLASSES\n   ****************************************************************************/\n\n  /* Ensures the klass namespace is created */\n  window.PxMap = (window.PxMap || {});\n\n  /**\n   *\n   * @class PxMap.StaticIcon\n   */\n  class StaticIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      // Extract `type` from settings with defaults\n      let { type='info', styleScope, color } = settings;\n\n      const className = this._generateStaticIconClasses(type, styleScope);\n\n      let customStyleBackground = '';\n      let customStyleBorder = '';\n\n      if (color) {\n        customStyleBackground = `background-color: ${color};`;\n        customStyleBorder = `border-color: ${color} transparent transparent;`;\n      }\n\n      // Static options\n      const html = `\n        <div class=\"map-icon-static__wrapper\">\n          <i class=\"map-icon-static__body\" style=\"${customStyleBackground}\"></i>\n          <i class=\"map-icon-static__descender\" style=\"${customStyleBorder}\"></i>\n          <i class=\"map-icon-static__badge\"></i>\n        </div>\n      `;\n      const iconSize = L.point(23,31);\n      const iconAnchor = L.point(7.6, 31);\n      const popupAnchor = L.point(1,-31);\n\n      // Define the `divIcon` options\n      const options = {\n        className,\n        html,\n        iconSize,\n        iconAnchor,\n        popupAnchor\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateStaticIconClasses(type, styleScope) {\n      const classes = ['map-icon', 'map-icon-static', 'map-icon-static--with-badge'];\n      if (type && type.length) {\n        classes.push(`map-icon-static--${type}`);\n      }\n      if (styleScope) {\n        classes.push(styleScope);\n      }\n      return classes.join(' ');\n    }\n  };\n  /* Bind StaticIcon klass */\n  PxMap.StaticIcon = StaticIcon;\n\n  /**\n   *\n   * @class PxMap.SymbolIcon\n   */\n  class SymbolIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      let { type='info', icon='px-nav:favorite', styleScope, stroke='currentColor', fill='none', strokeWidth='2px', color } = settings;\n      const className = this._generateSymbolIconClasses(type, styleScope);\n\n      let customStyleBackground = '';\n      let customStyleBorder = '';\n\n      if (color) {\n        customStyleBackground = `background-color: ${color};`;\n        customStyleBorder = `border-color: ${color} transparent transparent;`;\n      }\n\n      // Icon/Symbol options\n      const html = `\n      <div class=\"map-icon-symbol__wrapper\">\n        <i class=\"map-icon-symbol__body\" style=\"${customStyleBackground}\">\n          <div class=\"map-icon-symbol__symbol--container flex flex--middle flex--center\">\n            <px-icon icon=\"${icon}\" style=\"stroke:${stroke}; fill:${fill}; width:100%; height:100%; stroke-width:${strokeWidth}\"></px-icon>\n          </div>\n        </i>\n        <i class=\"map-icon-symbol__descender\" style=\"${customStyleBorder}\"></i>\n        <i class=\"map-icon-symbol__badge\"></i>\n      </div>\n      `;\n\n      const iconSize = L.point(40,56);\n      const iconAnchor = L.point(19.6, 57);\n      const popupAnchor = L.point(1,-58);\n\n      // Define the `divIcon` options\n      const options = {\n        className,\n        html,\n        iconSize,\n        iconAnchor,\n        popupAnchor\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateSymbolIconClasses(type, styleScope) {\n      const classes = ['map-icon', 'map-icon-symbol', 'map-icon-symbol--with-badge'];\n      if (type && type.length) {\n        classes.push(`map-icon-symbol--${type}`);\n      }\n      if (styleScope) {\n        classes.push(styleScope);\n      }\n      return classes.join(' ');\n    }\n  };\n  /* Bind SymbolIcon klass */\n  PxMap.SymbolIcon = SymbolIcon;\n\n  /**\n   *\n   * @class PxMap.ClusterIcon\n   */\n  class ClusterIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      // Extract `count`, `countByType`, `colorsByType`\n      const { count, countByType, colorsByType, containerSize=50, pathSize=10, borderSize=0, className='', styleScope } = settings;\n\n      // The chart size is the container size with the border size subtracted out,\n      // so we can draw and transform our SVG in the right dimensions\n      const chartSize = (containerSize - (borderSize > 0 ? (borderSize*2)-0.5 : 0));\n\n      // The icon size is a point representing the size of the icon's outer container\n      const iconSize = L.point(containerSize, containerSize);\n\n      // Get the SVG for this icon\n      const svg = this._generateClusterIconSVG(countByType, colorsByType, chartSize, pathSize);\n\n      // Generate the classes and wrapper HTML\n      const classes = `map-icon-cluster ${className||''} ${styleScope||''}`;\n      const html = `\n        <div class=\"map-icon-cluster__container\" style=\"width: ${containerSize}px; height: ${containerSize}px\">\n          <i class=\"map-icon-cluster__svg\">${svg}</i>\n          <div class=\"map-icon-cluster__body\">${count}</div>\n        </div>\n      `;\n\n      // Define the `divIcon` options\n      const options = {\n        iconSize: iconSize,\n        className: classes,\n        html: html\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateClusterIconSVG(countByType, colorsByType, chartSize, pathSize) {\n      // Combine the `countByType` and `colorsByType` into one array of objects,\n      // each describing a type with its associated count and color\n      const typeKeys = Object.keys(countByType);\n      const typeObjs = typeKeys.map(type => ({ type: type, count: countByType[type], color: colorsByType[type] }));\n\n      // Sort the types from highest->lowest\n      typeObjs.sort((a,b) => a.count - b.count);\n\n      // Create two parallel arrays of [types] and [colors]\n      const types = [];\n      const colors = [];\n      let i, len, type, total;\n      for (i=0, len=typeKeys.length; i<len; i++) {\n        type = typeKeys[i];\n        total = countByType[type];\n        types.push(countByType[type]);\n        colors.push(colorsByType[type])\n      }\n\n      // Return the pie chart\n      return this.createPieChart(types, colors, chartSize, pathSize);\n    }\n\n    createPieChart(groupsArray, colorsArray, chartSize, pathSize) {\n      // Create a pie generator and pass it the `groupsArray` to create a set\n      // of arcs we can draw as a donut pie cart\n      const pieGeneratorFn = Px.d3.pie();\n      const arcData = pieGeneratorFn(groupsArray);\n\n      // Calculate the `radius` and `innerRadius` of the chart\n      const radius = (chartSize / 2);\n      const innerRadius = (radius - pathSize);\n\n      // Create a path generator. Individual entries of `arcData` can be passed\n      // in to the path geneator to yield a stringified path that can be\n      // appended to a `<path>` tag's `d` attribute.\n      const arcPathGeneratorFn = Px.d3.arc().outerRadius(radius).innerRadius(innerRadius);\n\n      // Iterate over a list of `arcData` entries and return a block of paths\n      const pathListTmpl = (paths) => paths.map(pathTmpl).join('');\n\n      // For each path, generate a `<path>` tag with the correct attributes\n      const pathTmpl = (pathData, pathIndex) => `<path d=\"${arcPathGeneratorFn(pathData)}\" fill=\"${colorsArray[pathIndex]}\" opacity=\"1\"></path>`;\n\n      return `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 ${chartSize} ${chartSize}\">\n            <g transform=\"translate(${radius}, ${radius})\">\n                ${pathListTmpl(arcData)}\n            </g>\n        </svg>\n      `;\n    }\n  };\n  /* Bind ClusterIcon klass */\n  PxMap.ClusterIcon = ClusterIcon;\n})();\n"]}