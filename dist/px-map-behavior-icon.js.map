{"version":3,"sources":["px-map-behavior-icon.es6.js"],"names":["window","PxMap","StaticIcon","settings","icon","createIcon","type","styleScope","color","className","_generateStaticIconClasses","customStyleBackground","customStyleBorder","html","featureProperties","title","iconSize","L","point","iconAnchor","popupAnchor","options","divIcon","classes","length","push","join","SymbolIcon","stroke","fill","strokeWidth","_generateSymbolIconClasses","ClusterIcon","count","countByType","colorsByType","containerSize","pathSize","borderSize","markers","chartSize","markerTypeArray","_getOilGasRefCount","oil","gas","ref","id","Date","getTime","regionLabel","label","tooltipMsgHtml","production","svg","_generateClusterIconSVG","cluster","updateTypeIfHigher","obj","marker","iconType","forEach","_m","typeKeys","Object","keys","typeObjs","map","sort","a","b","types","colors","i","len","total","createPieChart","groupsArray","colorsArray","console","log","pieGeneratorFn","Px","d3","pie","arcData","radius","innerRadius","arcPathGeneratorFn","arc","outerRadius","pathListTmpl","paths","pathTmpl","pathData","pathIndex","col"],"mappings":"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","file":"px-map-behavior-icon.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018, General Electric\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /****************************************************************************\n   * KLASSES\n   ****************************************************************************/\n\n  /* Ensures the klass namespace is created */\n  window.PxMap = (window.PxMap || {});\n\n  /**\n   *\n   * @class PxMap.StaticIcon\n   */\n  class StaticIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      // Extract `type` from settings with defaults\n      let { type='info', styleScope, color } = settings;\n\n      const className = this._generateStaticIconClasses(type, styleScope);\n\n      let customStyleBackground = '';\n      let customStyleBorder = '';\n\n      if (color) {\n        customStyleBackground = `background-color: ${color};`;\n        customStyleBorder = `border-color: ${color} transparent transparent;`;\n      }\n\n      // Static options\n      let html;\n      if(settings.featureProperties.title) {\n        html  = `\n          <div class=\"map-icon-static__wrapper\">\n            <i class=\"map-icon-static__body\" style=\"${customStyleBackground}\"></i>\n            <i class=\"map-icon-static__descender\" style=\"${customStyleBorder}\"></i>\n            <i class=\"map-icon-static__badge\"></i>\n            <div style=\"padding-top: 1.5rem; margin-left: -1rem; \n              color: black; padding-left: 1rem; font-size: 0.8rem;\n              line-height:0.7rem;\">${settings.featureProperties.title}</div>\n          </div>\n        `;\n      } else {\n        html  = `\n          <div class=\"map-icon-static__wrapper\">\n            <i class=\"map-icon-static__body\" style=\"${customStyleBackground}\"></i>\n            <i class=\"map-icon-static__descender\" style=\"${customStyleBorder}\"></i>\n            <i class=\"map-icon-static__badge\"></i>\n          </div>\n        `;\n      }\n      const iconSize = L.point(23,31);\n      const iconAnchor = L.point(7.6, 31);\n      const popupAnchor = L.point(1,-31);\n\n      // Define the `divIcon` options\n      const options = {\n        className,\n        html,\n        iconSize,\n        iconAnchor,\n        popupAnchor\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateStaticIconClasses(type, styleScope) {\n      const classes = ['map-icon', 'map-icon-static', 'map-icon-static--with-badge'];\n      if (type && type.length) {\n        classes.push(`map-icon-static--${type}`);\n      }\n      if (styleScope) {\n        classes.push(styleScope);\n      }\n      return classes.join(' ');\n    }\n  };\n  /* Bind StaticIcon klass */\n  PxMap.StaticIcon = StaticIcon;\n\n  /**\n   *\n   * @class PxMap.SymbolIcon\n   */\n  class SymbolIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      let { type='info', icon='px-nav:favorite', styleScope, stroke='currentColor', fill='none', strokeWidth='2px', color } = settings;\n      const className = this._generateSymbolIconClasses(type, styleScope);\n\n      let customStyleBackground = '';\n      let customStyleBorder = '';\n\n      if (color) {\n        customStyleBackground = `background-color: ${color};`;\n        customStyleBorder = `border-color: ${color} transparent transparent;`;\n      }\n\n      // Icon/Symbol options\n      let html;\n      if(settings.featureProperties.title) {\n        stroke = 'black';\n        html  = `\n          <div class=\"map-icon-symbol__wrapper\">\n            <i class=\"map-icon-symbol__body\" style=\"${customStyleBackground}\">\n              <div class=\"map-icon-symbol__symbol--container flex flex--middle flex--center\">\n                <px-icon icon=\"${icon}\" style=\"stroke:${stroke}; fill:${fill}; width:100%; height:100%; stroke-width:${strokeWidth}\"></px-icon>\n              </div>\n            </i>\n            <i class=\"map-icon-symbol__descender\" style=\"${customStyleBorder}\"></i>\n            <i class=\"map-icon-symbol__badge\"></i>\n            <div style=\"padding-top: 3.5rem; margin-left: -1rem; \n              color: black; padding-left: 1rem; font-size: 0.8rem;\n              line-height:0.7rem;\">${settings.featureProperties.title}</div>\n          </div>\n        `;\n      } else {\n        html  = `\n        <div class=\"map-icon-symbol__wrapper\">\n          <i class=\"map-icon-symbol__body\" style=\"${customStyleBackground}\">\n            <div class=\"map-icon-symbol__symbol--container flex flex--middle flex--center\">\n              <px-icon icon=\"${icon}\" style=\"stroke:${stroke}; fill:${fill}; width:100%; height:100%; stroke-width:${strokeWidth}\"></px-icon>\n            </div>\n          </i>\n          <i class=\"map-icon-symbol__descender\" style=\"${customStyleBorder}\"></i>\n          <i class=\"map-icon-symbol__badge\"></i>\n        </div>\n        `;\n      }\n\n      const iconSize = L.point(40,56);\n      const iconAnchor = L.point(19.6, 57);\n      const popupAnchor = L.point(1,-58);\n\n      // Define the `divIcon` options\n      const options = {\n        className,\n        html,\n        iconSize,\n        iconAnchor,\n        popupAnchor\n      };\n\n      return L.divIcon(options);\n    }\n\n    _generateSymbolIconClasses(type, styleScope) {\n      const classes = ['map-icon', 'map-icon-symbol', 'map-icon-symbol--with-badge'];\n      if (type && type.length) {\n        classes.push(`map-icon-symbol--${type}`);\n      }\n      if (styleScope) {\n        classes.push(styleScope);\n      }\n      return classes.join(' ');\n    }\n  };\n  /* Bind SymbolIcon klass */\n  PxMap.SymbolIcon = SymbolIcon;\n\n  /**\n   *\n   * @class PxMap.ClusterIcon\n   */\n  class ClusterIcon {\n    constructor(settings={}) {\n      this.icon = this.createIcon(settings);\n      return this.icon;\n    }\n\n    createIcon(settings={}) {\n      // Extract `count`, `countByType`, `colorsByType`\n      const { count, countByType, colorsByType, containerSize=50, \n        pathSize=10, borderSize=0, className='', styleScope, markers } = settings;\n\n      // The chart size is the container size with the border size subtracted out,\n      // so we can draw and transform our SVG in the right dimensions\n      const chartSize = (containerSize - (borderSize > 0 ? (borderSize*2)-0.5 : 0));\n\n      // The icon size is a point representing the size of the icon's outer container\n      const iconSize = L.point(containerSize, containerSize);\n\n      const markerTypeArray = this._getOilGasRefCount(markers);\n      const [oil, gas, ref] = markerTypeArray;\n      const id = new Date().getTime();\n      const regionLabel = oil.label || gas.label || ref.label || '';\n      // Generate the classes and wrapper HTML\n      const classes = `map-icon-cluster ${className||''} ${styleScope||''}`;\n      const tooltipMsgHtml = `\n        <div style=\"width: 200%\">\n          <div>\n            <span style=\"padding-right: 3rem;\">${regionLabel}</span>\n            <b>${oil.production+gas.production+ref.production} BOE/day</b>\n          </div>\n          <div style=\"display: inline-block; padding-top: 1rem;\">\n            <span style=\"padding-right: 1rem;\">\n              <px-icon icon=\"px-obj:line-og\"></px-icon>\n              <span style=\"font-weight: bold; font-size: 2rem;\">${oil.count}</span>\n            </span>\n            <span style=\"padding-right: 1rem;\">\n              <px-icon icon=\"px-obj:boiler\"></px-icon>\n              <span style=\"font-weight: bold; font-size: 2rem;\">${gas.count}</span>\n            </span>\n            <span style=\"padding-right: 1rem;\">\n              <px-icon icon=\"px-obj:hrsg\"></px-icon>\n              <span style=\"font-weight: bold; font-size: 2rem;\">${ref.count}</span>\n            </span>\n          </div>\n        </div>\n      `;\n\n      // Get the SVG for this icon\n      const svg = this._generateClusterIconSVG(countByType, colorsByType, chartSize, pathSize, oil, gas, ref, regionLabel);\n      const html = `\n        <px-tooltip\n          style=\"margin: 2rem;\"\n          for=\"cluster-${id}\"\n          orientation=\"auto\">\n          ${tooltipMsgHtml}\n        </px-tooltip>  \n        <i class=\"map-icon-cluster__svg\">${svg}</i>\n      `;\n\n      // Define the `divIcon` options\n      const options = {\n        iconSize: iconSize,\n        className: classes,\n        html: html\n      };\n\n      return L.divIcon(options);\n    }\n\n    _getOilGasRefCount(markers) {\n      let oil = {\"count\": 0, \"type\": \"unknown\", \"production\": 0,\n                 \"icon\": \"px-obj:line-og\", \"label\": \"\"}, \n          gas = {\"count\": 0, \"type\": \"unknown\", \"production\": 0,\n                 \"icon\": \"px-obj:boiler\", \"label\": \"\"}, \n          ref = {\"count\": 0, \"type\": \"unknown\", \"production\": 0,\n                 \"icon\": \"px-obj:hrsg\", \"label\": \"\"};\n      let cluster;\n      const updateTypeIfHigher = (obj, marker) => {\n        if(marker[\"marker-icon\"] && marker[\"marker-icon\"][\"icon-type\"]) {\n          const iconType = marker[\"marker-icon\"][\"icon-type\"];\n          if(\"warning\" == iconType && obj.type !== \"important\") {\n            obj.type = \"warning\";\n          } else if(\"important\" == iconType) {\n            obj.type = \"important\";\n          } else if(\"info\" == iconType \n              && obj.type == \"unknown\") {\n            obj.type = \"info\";   \n          }\n        }\n      }\n      markers.forEach((_m) => {\n        cluster = _m.featureProperties.cluster;\n        if(cluster) {\n          if('oil' === cluster.type) {\n            ++oil.count;\n            oil.production += cluster.production;\n            oil.label = cluster.label;\n            updateTypeIfHigher(oil, _m.featureProperties);\n          } else if('gas' === cluster.type) {\n            ++gas.count;\n            gas.production += cluster.production;\n            gas.label = cluster.label;\n            updateTypeIfHigher(gas, _m.featureProperties);\n          } else if('ref' === cluster.type) {\n            ++ref.count;\n            ref.production += cluster.production;\n            ref.label = cluster.label;\n            updateTypeIfHigher(ref, _m.featureProperties);\n          }\n        }\n      });\n      return [oil, gas, ref];\n    }\n\n    _generateClusterIconSVG(countByType, colorsByType, chartSize, pathSize, oil, gas, ref, regionLabel) {\n      // Combine the `countByType` and `colorsByType` into one array of objects,\n      // each describing a type with its associated count and color\n      const typeKeys = Object.keys(countByType);\n      const typeObjs = typeKeys.map(type => ({ type: type, count: countByType[type], color: colorsByType[type] }));\n\n      // Sort the types from highest->lowest\n      typeObjs.sort((a,b) => a.count - b.count);\n\n      // Create two parallel arrays of [types] and [colors]\n      const types = [];\n      const colors = [];\n      let i, len, type, total;\n      for (i=0, len=typeKeys.length; i<len; i++) {\n        type = typeKeys[i];\n        total = countByType[type];\n        types.push(countByType[type]);\n        colors.push(colorsByType[type])\n      }\n\n      // Return the pie chart\n      return this.createPieChart(types, colors, chartSize, pathSize, oil, gas, ref, regionLabel);\n    }\n\n    createPieChart(groupsArray, colorsArray, chartSize, pathSize, oil, gas, ref, regionLabel) {\n      console.log(oil, regionLabel);\n      // Create a pie generator and pass it the `groupsArray` to create a set\n      // of arcs we can draw as a donut pie cart\n      const pieGeneratorFn = Px.d3.pie();\n      const arcData = pieGeneratorFn(groupsArray);\n\n      // Calculate the `radius` and `innerRadius` of the chart\n      const radius = (chartSize / 2);\n      const innerRadius = (radius - pathSize);\n\n      // Create a path generator. Individual entries of `arcData` can be passed\n      // in to the path geneator to yield a stringified path that can be\n      // appended to a `<path>` tag's `d` attribute.\n      const arcPathGeneratorFn = Px.d3.arc().outerRadius(radius).innerRadius(innerRadius);\n\n      // Iterate over a list of `arcData` entries and return a block of paths\n      const pathListTmpl = (paths) => paths.map(pathTmpl).join('');\n\n      // For each path, generate a `<path>` tag with the correct attributes\n      const pathTmpl = (pathData, pathIndex) => `<path d=\"${arcPathGeneratorFn(pathData)}\" fill=\"${colorsArray[pathIndex]}\" opacity=\"1\"></path>`;\n\n      // return `\n      //   <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" preserveAspectRatio=\"none\" viewBox=\"0 0 ${chartSize} ${chartSize}\">\n      //       <g transform=\"translate(${radius}, ${radius})\">\n      //           ${pathListTmpl(arcData)}\n      //       </g>\n      //   </svg>\n      // `;\n      const id = new Date().getTime();\n      const col = regionLabel == \"Reggane\" ? \"#be4748\" : \"#679f00\";\n      return `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" preserveAspectRatio=\"none\" width=\"131px\" height=\"109px\" viewBox=\"0 0 140 120\">\n      <g id=\"MOP-${id}\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"1a.-Ministry-dashboard-Copy-3-${id}\" transform=\"translate(-1113.000000, -429.000000)\">\n            <g id=\"Group-2-${id}\" transform=\"translate(1114.000000, 430.000000)\">\n                <circle id=\"Oval-4-${id}\" stroke=\"#9B9B9B\" stroke-width=\"2\" cx=\"60.5\" cy=\"39.5\" r=\"36.5\"></circle>\n                <g id=\"Group-Copy-7-${id}\" transform=\"translate(0.000000, 22.000000)\">\n                    <text id=\"Eastern-Desert-${id}\" font-family=\"GEInspiraSans-Regular, GE Inspira Sans\" font-size=\"15\" font-weight=\"normal\" fill=\"#4A4A4A\">\n                        <tspan x=\"75\" y=\"65\">${regionLabel}</tspan>\n                    </text>\n                    <circle id=\"Oval-3-${id}\" stroke=\"#9B9B9B\" fill=\"${col}\" cx=\"22.5\" cy=\"41.5\" r=\"22.5\"></circle>\n                    <text id=\"12-${id}\" font-family=\"GEInspiraSans-Regular, GE Inspira Sans\" font-size=\"36\" font-weight=\"normal\" fill=\"#59717F\">\n                        <tspan x=\"45.848\" y=\"28\">${oil.count}</tspan>\n                    </text>\n                </g>\n            </g>\n        </g>\n      </g>\n      </svg>`;\n    }\n  };\n  /* Bind ClusterIcon klass */\n  PxMap.ClusterIcon = ClusterIcon;\n})();\n"]}