{"version":3,"sources":["og-gis-map.es6.js"],"names":["Polymer","is","properties","width","type","String","value","height","crs","Object","lat","Number","notify","lng","zoom","maxZoom","minZoom","maxBounds","Array","tileUrl","features","featureStyle","upstream","midstream","downstream","predictive","colorsByType","regions","observer","clusterConfig","hasRegions","Boolean","computed","attached","window","setTimeout","zoomIn","document","querySelector","zoomOut","click","_isValidMarkerGroup","obj","_hasRegions","length","_focusRegion","evt","eventDetail","detail","selected","item","key","$","map","_selectDefaultRegion","regionsDropdownData","forEach","_region","idx","val","label","default","push","_removePressed","upstreamPressedCls","undefined","midstreamPressedCls","downstreamPressedCls","predictivePressedCls","_backup","redraw","_restore","_key","_hideAll","_showAll","_toggleUpstreamOnly","_toggleMidstreamOnly","_toggleDownstreamOnly","_togglePredictiveOnly","_shouldHide","bool"],"mappings":"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","file":"og-gis-map.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'og-gis-map', \n\n    properties: {\n      /**\n       * Component width\n       */\n      width: {\n        type: String,\n        value: '75vw'\n      },\n      /**\n      * Component Height\n      */\n      height: {\n        type: String,\n        value: '500px'\n      },\n      /**\n       * The coordinate reference system to use when projecting geographic points\n       * into pixel coordinates. Can only be set once before the map is first\n       * initialized. If you don't know what this is, do not set it and the map\n       * will default to the most common web mapping projection (EPSG3857).\n       *\n       * @type {L.CRS}\n       */\n      crs: {\n        type: Object\n      },\n      /**\n       * The latitude of the active map center. Can be used to set or update\n       * the center of the map, or read from after the user moves the map to\n       * get updated coordinates.\n       * \n       * When `regions` is specified, latitude and longitude may be picked from there.\n       * So avoid providing both\n       *\n       * @type {Number}\n       */\n      lat: {\n        type: Number,\n        notify: true\n      },\n      /**\n       * The longitude of the active map center. Can be used to set or update\n       * the center of the map, or read from after the user moves the map to\n       * get updated coordinates.\n       * \n       * When `regions` is specified, latitude and longitude may be picked from there.\n       * So avoid providing both\n       * \n       * @type {Number}\n       */\n      lng: {\n        type: Number,\n        notify: true\n      },\n\n      /**\n       * The zoom level of the active map. Can be used to set or update\n       * the zoom level of the map, or read from after the user changes the\n       * map zoom level to an updated value.\n       *\n       * @type {Number}\n       */\n      zoom: {\n        type: Number,\n        value: 10\n      },\n\n      /**\n       * The maximum zoom level for the active map (the furthest the user can\n       * zoom in). Setting it at the map level will take precedence over the\n       * max zoom of all other layers, including tile layers. If you need to\n       * set different zoom bounds based on the visible tile layer, set the\n       * max zoom directly on your tile layer.\n       *\n       * @type {Number}\n       */\n      maxZoom: {\n        type: Number\n      },\n\n      /**\n      * The minimum zoom level for the active map (the furthest the user can\n      * zoom out). Setting it at the map level will take precedence over the\n      * min zoom of all other layers, including tile layers. If you need to\n      * set different zoom bounds based on the visible tile layer, set the\n      * min zoom directly on your tile layer.\n       *\n       * @type {Number}\n       */\n      minZoom: {\n        type: Number\n      },\n\n      /**\n       * Restricts the user from moving the map outside of a specific geographic\n       * boundary. The user will be bounced back if they attempt to pan outside the view.\n       * Disabled by default, letting the user pan to any point on the map.\n       *\n       * Pass an array of [lat,lng] values like the following:\n       *\n       *        [[40.712, -74.227], [40.774, -74.125]]\n       *\n       * The first pair should represent the southwest extend of the boundary,\n       * and the second  pair should represent the northeast extend of the\n       * boundary.\n       *\n       * @type {Array}\n       */\n      maxBounds: {\n        type: Array\n      },\n      /**\n       * A template string that will be converted into a URL used to call the tile\n       * service. Should be in the following format:\n       *\n       *    `http://{s}.somedomain.com/blabla/{z}/{x}/{y}.png`\n       *\n       * The following values will be substituted for letters in `{}` brackets:\n       *\n       * - `{s}`: a subdomain to call to allow the browser to make many parallel requests\n       * - `{z}`: the map zoom level\n       * - `{x}` and `{y}`: the coordinates for the tile\n       *\n       * @type {String}\n       */\n      tileUrl: {\n        type: String,\n        value: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n      },\n      /**\n       * An object formatted as a GeoJSON FeatureCollection with one or more Features.\n       * Each feature can be formatted as any valid GeoJSON geometry type: Point,\n       * LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon,\n       * or GeometryCollection. See the [GeoJSON spec](http://geojson.org/geojson-spec.html)\n       * for guidance on generating valid GeoJSON.\n       *\n       * Each feature should contain a `properties` object that can hold metadata\n       * about the feature. Optionally, the feature's `properties.style` can be\n       * set to an object that will be used to style the feature when it is drawn.\n       * Styles set in a feature's `properties.style` will override the styles\n       * set in the `featureStyle` attribute. See the `featureStyle` attribute\n       * documentation for a list of available style options.\n       *\n       * @type {Object}\n       */\n      features: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An object with settings that will be used to style each feature when\n       * it is added to the map. The following options are available:\n       *\n       * - {Boolean} `stroke`: [default=true] Set to false to disable borders on polygons/circles\n       * - {String} `color`: [default=$primary-blue] Color for polygon/circle borders\n       * - {Number} `weight`: [default=2] Weight for polygon/circle borders in pixels\n       * - {Number} `opacity`: [default=1.0] Opacity for polygon/circle borders\n       * - {Boolean} `fill`: [default=true] Set to false to disable filling polygons/circles\n       * - {String} `fillColor`: [default=$dv-light-blue] Color for polygon/circle fill\n       * - {Number} `fillOpacity`: [default=0.4] Opacity for polygon/circle fill\n       * - {String} `fillRule`: [default='evenodd'] Defines how the [inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined\n       * - {String} `lineCap`: [default='round'] Defines the [shape to be used](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) at the end of the stroke\n       * - {String} `lineJoin`: [default='round'] Defines the [shape to be used](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) at the corner of a stroke\n       * - {String} `dashArray`: [default=null] Defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray)\n       * - {String} `dashOffset`: [default=null] Defines the [distance into the dash to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset)\n       *\n       * Note that styles can also be added to each feature individually (see\n       * the `data` attribute documentation). Styles defined on each feature will\n       * override the `featureStyle`.\n       *\n       * @type {Object}\n       */\n      featureStyle: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      upstream: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      midstream: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      downstream: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      predictive: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An object mapping categories of icons to their respective colors. Each\n       * key should be a string representing the name of an `icon-type` to\n       * a valid CSS color value (e.g. hex color, `rgb()` color). Set the\n       * `icon-type` as a sub-property of `properties.marker-icon` for each marker\n       * feature in the FeatureCollection you pass into the `data` attribute.\n       *\n       * By default, the available types are:\n       * - \"unknown\" : \"--px-map-icon-unknown-color\" (default: gray)\n       * - \"info\" : \"--px-map-icon-info-color\" (default: blue)\n       * - \"warning\" : \"--px-map-icon-warning-color\" (default: orange)\n       * - \"important\" : \"--px-map-icon-important-color\" (default: red)\n       * - \"custom-n\" : \"--px-map-color-custom-n\" (default: n/a)\n       *\n       * Example #1 - `colorsByType` object\n       *\n       * ```\n       * {\n       *   \"info\" : \"blue\",\n       *   \"warning\" : \"orange\",\n       *   \"important\" : \"red\",\n       *   \"unknown\" : \"gray\"\n       * }\n       * ```\n       *\n       * Example #2 - `colorsByType` object with custom types\n       *\n       * ```\n       * {\n       *   \"info\" : \"blue\",\n       *   \"custom-0\" : \"salmon\",\n       *   \"custom-1\" : \"lime\",\n       *   \"custom-2\" : \"crimson\"\n       * }\n       * ```\n       *\n       * @type {Object}\n       */\n      colorsByType: {\n        type: Object,\n        value(){\n          return {};\n        }\n      },\n      /**\n       * List of Regions in the map. Will be rendered in the button overlay.\n       * Clicking on the region will move the focus to the specific \n       * latitude and longitude in the map.\n       * \n       * Format: [{label: \"Region 1\", lat: 100, lng: 0, default: true}, {label: \"Region 2\", lat: -100, lng: 0}]\n       * @type {Array}\n       */\n      regions: {\n        type: Array,\n        value() {\n          return []\n        },\n        observer: '_selectDefaultRegion'\n      },\n      /**\n       * Allows advanced configurations of the cluster behaviors and styles. Note\n       * that the cluster comes pre-configured with settings that will work\n       * for most use cases; the `clusterConfig` allows those settings to be\n       * overriden but may cause unexpected behaviors when conflicting settings\n       * are used. Leave the default configuration (by not setting this attribute)\n       * if you're unsure of how to use it.\n       *\n       * The following settings are available:\n       *\n       * - {Boolean} `showCoverageOnHover`: [default=true] Shows the bounds of a cluster as a polygon when its icon is hovered\n       * - {Boolean} `zoomToBoundsOnClick`: [default=true] Zooms to bounds of a cluster when its icon is clicked\n       * - {Boolean} `spiderfyOnMaxZoom`: [default=true] Spiderfies the markers in a cluster when it is clicked at the max zoom level\n       * - {Boolean} `removeOutsideVisibleBounds`: [default=true] Removes cluster icons and markers when they are too far outside the visible map bounds\n       * - {Boolean} `animate`: [default=true] Animates cluster splitting, joining, zooming, and spiderfying\n       * - {Number} `disableClusteringAtZoom`: [default=undefined] If set, when the user zooms below this level markers will not be clustered (do not combine with `spiderfyOnMaxZoom`)\n       * - {Number} `maxClusterRadius`: [default=150] The maximum radius in pixels a cluster will cover from the central marker. Lower numbers make smaller clusters. Setting below the default may cause cluster icons to overlap.\n       * - {Object} `polygonOptions`: [default=150] Options passed to draw the cluster cover polygon\n       *   - {Boolean} `polygonOptions.stroke`: [default=true] If true the polygon will have a stroke line around the outside\n       *   - {String} `polygonOptions.color`: [default=--px-map-marker-group-cluster-polygon-stroke-color] Sets the stroke color, prefer setting with the style variable\n       *   - {String} `polygonOptions.fillColor`: [default=--px-map-marker-group-cluster-polygon-fill-color] Sets the fill color color, prefer setting with the style variable.\n       *   - {Number} `polygonOptions.fillOpacity`: [default=0.4] Sets the opacity of the polygon fill\n       * - {Object} `spiderLegPolylineOptions`: [default=undefined] Sets the style for the marker spiderfy legs, see [PolylineOptions](http://leafletjs.com/reference.html#polyline-options)\n       *\n       * @type {Object}\n       */\n      clusterConfig: {\n        type: Object,\n        value() {\n          return {}\n        }\n      },\n      hasRegions: {\n        type: Boolean,\n        computed: '_hasRegions(regions)',\n        value() {\n          return []\n        }\n      }\n    },\n\n    attached() {\n      //Fixes unrendered regions\n      window.setTimeout(() => {\n        const zoomIn = document.querySelector(\"#map a.leaflet-control-zoom-in\");\n        const zoomOut = document.querySelector(\"#map a.leaflet-control-zoom-out\");\n        zoomIn && zoomIn.click();\n        zoomOut && zoomOut.click();\n      }, 1000);\n    },\n\n    _isValidMarkerGroup(obj) {\n      return obj && obj.type;\n    },\n\n    _hasRegions(regions){\n      return regions && regions.length;\n    },\n    _focusRegion(evt) {\n      let eventDetail = evt.detail;\n      if(eventDetail.selected) {\n        let item = this.regions[eventDetail.key];\n        this.lat = item.lat;\n        this.lng = item.lng;\n        this.$.map.zoom = item.zoom || this.zoom;\n      }\n    },\n    _selectDefaultRegion() {\n      this.regionsDropdownData = [];\n      if(this.regions) {\n        this.regions.forEach((_region, idx) => {\n          let obj = _region;\n          obj.key = idx;\n          obj.val = _region.label\n          if(_region.default) {\n            this.lat = _region.lat;\n            this.lng = _region.lng;\n            obj.selected = true;\n          }\n          this.regionsDropdownData.push(obj);\n        });\n      }\n    },\n    _removePressed() {\n      this.upstreamPressedCls = undefined;\n      this.midstreamPressedCls = undefined;\n      this.downstreamPressedCls = undefined;\n      this.predictivePressedCls = undefined;\n    },\n    _backup(key) {\n      if(this[key] && this[key].type) {\n        this[`_${key}`] = this[key];\n        this[key] = undefined;\n        document.querySelector(`#${key}`).redraw();\n      }\n    },\n    _restore(key) {\n      const _key = `_${key}`;\n      if(this[_key] && this[_key].type) {\n        this[key] = this[_key];\n        this[_key] = undefined;\n        document.querySelector(`#${key}`).redraw();\n      }\n    },\n    _hideAll() {\n      this._removePressed();\n      this._backup('upstream');\n      this._backup('midstream');\n      this._backup('downstream');\n      this._backup('predictive');\n    },\n    _showAll() {\n      this._removePressed();\n      this._restore('upstream');\n      this._restore('midstream');\n      this._restore('downstream');\n      this._restore('predictive');\n    },\n    _toggleUpstreamOnly() {\n      if(!this.upstreamPressedCls) {\n        this._hideAll();\n        this.upstreamPressedCls = 'pressed';\n        this._restore('upstream');\n      } else {\n        this._showAll();\n      }\n    },\n    _toggleMidstreamOnly() {\n      if(!this.midstreamPressedCls) {\n        this._hideAll();\n        this.midstreamPressedCls = 'pressed';\n        this._restore('midstream');\n      } else {\n        this._showAll();\n      }\n    },\n    _toggleDownstreamOnly() {\n      if(!this.downstreamPressedCls) {\n        this._hideAll();\n        this.downstreamPressedCls = 'pressed';\n        this._restore('downstream');\n      } else {\n        this._showAll();\n      }\n    },\n    _togglePredictiveOnly() {\n      if(!this.predictivePressedCls) {\n        this._hideAll();\n        this.predictivePressedCls = 'pressed';\n        this._restore('predictive');\n      } else {\n        this._showAll();\n      }\n    },\n    _shouldHide(bool) {\n      return bool;\n    }\n  });\n})();\n"]}