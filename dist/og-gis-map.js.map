{"version":3,"sources":["og-gis-map.es6.js"],"names":["Polymer","is","behaviors","IronResizableBehavior","listeners","properties","width","type","String","value","observer","height","crs","Object","lat","Number","notify","lng","zoom","maxZoom","minZoom","maxBounds","Array","tileUrl","features","featureStyle","upstream","midstream","downstream","predictive","colorsByType","regions","clusterConfig","contextPaneProportion","hasRegions","Boolean","computed","toggleMarginTop","toggleMarginLeft","attached","contextPaneOpen","me","window","setTimeout","zoomIn","document","querySelector","zoomOut","click","getBoundingClientRect","left","_adjustFilterHorizontalMargin","_adjustMapHeight","toggleContextPane","currHeightNum","replace","cpMinHeightPercentage","mapHeightPercentage","mapOrigHeightPercentage","newMapHeight","Math","ceil","contextPaneMinHeight","offsetHeight","defaultHeight","contextPaneMaxHeight","invalidateSize","$","map","_isValidMarkerGroup","obj","_hasRegions","length","_focusRegion","evt","eventDetail","detail","selected","item","key","_selectDefaultRegion","regionsDropdownData","forEach","_region","idx","val","label","default","push","_removePressed","upstreamPressedCls","undefined","midstreamPressedCls","downstreamPressedCls","predictivePressedCls","_backup","redraw","_restore","_key","_hideAll","_showAll","_toggleUpstreamOnly","_toggleMidstreamOnly","_toggleDownstreamOnly","_togglePredictiveOnly","_shouldHide","bool","newWidth","oldWidth","comp","widthNum","filterMarginLeft","toggles","style","marginLeft","filter","_adjustFilterVerticalMargin","newHeight","oldHeight","heightNum","marginTop","_compute","_onIronResize","console","log","arguments"],"mappings":"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","file":"og-gis-map.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'og-gis-map', \n\n    behaviors: [Polymer.IronResizableBehavior],\n\n    listeners: {'iron-resize': '_onIronResize'},\n\n    properties: {\n      /**\n       * Component width\n       */\n      width: {\n        type: String,\n        value: '75vw',\n        observer: '_adjustFilterHorizontalMargin'\n      },\n      /**\n      * Component Height\n      */\n      height: {\n        type: String,\n        value: '500px',\n        observer: '_adjustFilterVerticalMargin'\n      },\n      /**\n       * The coordinate reference system to use when projecting geographic points\n       * into pixel coordinates. Can only be set once before the map is first\n       * initialized. If you don't know what this is, do not set it and the map\n       * will default to the most common web mapping projection (EPSG3857).\n       *\n       * @type {L.CRS}\n       */\n      crs: {\n        type: Object\n      },\n      /**\n       * The latitude of the active map center. Can be used to set or update\n       * the center of the map, or read from after the user moves the map to\n       * get updated coordinates.\n       * \n       * When `regions` is specified, latitude and longitude may be picked from there.\n       * So avoid providing both\n       *\n       * @type {Number}\n       */\n      lat: {\n        type: Number,\n        notify: true\n      },\n      /**\n       * The longitude of the active map center. Can be used to set or update\n       * the center of the map, or read from after the user moves the map to\n       * get updated coordinates.\n       * \n       * When `regions` is specified, latitude and longitude may be picked from there.\n       * So avoid providing both\n       * \n       * @type {Number}\n       */\n      lng: {\n        type: Number,\n        notify: true\n      },\n\n      /**\n       * The zoom level of the active map. Can be used to set or update\n       * the zoom level of the map, or read from after the user changes the\n       * map zoom level to an updated value.\n       *\n       * @type {Number}\n       */\n      zoom: {\n        type: Number,\n        value: 10\n      },\n\n      /**\n       * The maximum zoom level for the active map (the furthest the user can\n       * zoom in). Setting it at the map level will take precedence over the\n       * max zoom of all other layers, including tile layers. If you need to\n       * set different zoom bounds based on the visible tile layer, set the\n       * max zoom directly on your tile layer.\n       *\n       * @type {Number}\n       */\n      maxZoom: {\n        type: Number\n      },\n\n      /**\n      * The minimum zoom level for the active map (the furthest the user can\n      * zoom out). Setting it at the map level will take precedence over the\n      * min zoom of all other layers, including tile layers. If you need to\n      * set different zoom bounds based on the visible tile layer, set the\n      * min zoom directly on your tile layer.\n       *\n       * @type {Number}\n       */\n      minZoom: {\n        type: Number\n      },\n\n      /**\n       * Restricts the user from moving the map outside of a specific geographic\n       * boundary. The user will be bounced back if they attempt to pan outside the view.\n       * Disabled by default, letting the user pan to any point on the map.\n       *\n       * Pass an array of [lat,lng] values like the following:\n       *\n       *        [[40.712, -74.227], [40.774, -74.125]]\n       *\n       * The first pair should represent the southwest extend of the boundary,\n       * and the second  pair should represent the northeast extend of the\n       * boundary.\n       *\n       * @type {Array}\n       */\n      maxBounds: {\n        type: Array\n      },\n      /**\n       * A template string that will be converted into a URL used to call the tile\n       * service. Should be in the following format:\n       *\n       *    `http://{s}.somedomain.com/blabla/{z}/{x}/{y}.png`\n       *\n       * The following values will be substituted for letters in `{}` brackets:\n       *\n       * - `{s}`: a subdomain to call to allow the browser to make many parallel requests\n       * - `{z}`: the map zoom level\n       * - `{x}` and `{y}`: the coordinates for the tile\n       *\n       * @type {String}\n       */\n      tileUrl: {\n        type: String,\n        value: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n      },\n      /**\n       * An object formatted as a GeoJSON FeatureCollection with one or more Features.\n       * Each feature can be formatted as any valid GeoJSON geometry type: Point,\n       * LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon,\n       * or GeometryCollection. See the [GeoJSON spec](http://geojson.org/geojson-spec.html)\n       * for guidance on generating valid GeoJSON.\n       *\n       * Each feature should contain a `properties` object that can hold metadata\n       * about the feature. Optionally, the feature's `properties.style` can be\n       * set to an object that will be used to style the feature when it is drawn.\n       * Styles set in a feature's `properties.style` will override the styles\n       * set in the `featureStyle` attribute. See the `featureStyle` attribute\n       * documentation for a list of available style options.\n       *\n       * @type {Object}\n       */\n      features: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An object with settings that will be used to style each feature when\n       * it is added to the map. The following options are available:\n       *\n       * - {Boolean} `stroke`: [default=true] Set to false to disable borders on polygons/circles\n       * - {String} `color`: [default=$primary-blue] Color for polygon/circle borders\n       * - {Number} `weight`: [default=2] Weight for polygon/circle borders in pixels\n       * - {Number} `opacity`: [default=1.0] Opacity for polygon/circle borders\n       * - {Boolean} `fill`: [default=true] Set to false to disable filling polygons/circles\n       * - {String} `fillColor`: [default=$dv-light-blue] Color for polygon/circle fill\n       * - {Number} `fillOpacity`: [default=0.4] Opacity for polygon/circle fill\n       * - {String} `fillRule`: [default='evenodd'] Defines how the [inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined\n       * - {String} `lineCap`: [default='round'] Defines the [shape to be used](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) at the end of the stroke\n       * - {String} `lineJoin`: [default='round'] Defines the [shape to be used](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) at the corner of a stroke\n       * - {String} `dashArray`: [default=null] Defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray)\n       * - {String} `dashOffset`: [default=null] Defines the [distance into the dash to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset)\n       *\n       * Note that styles can also be added to each feature individually (see\n       * the `data` attribute documentation). Styles defined on each feature will\n       * override the `featureStyle`.\n       *\n       * @type {Object}\n       */\n      featureStyle: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      upstream: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      midstream: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      downstream: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An array of objects formatted as a GeoJSON FeatureCollection with one or many Features.\n       * Each feature should be a point that will be represented as a marker.\n       * See the `px-map-marker-group` API documentation page for an in-depth\n       * guide that explains how to configure your features.\n       *\n       * The root feature collection object must have the following keys/values:\n       *\n       * - {String} `type`: Must be 'FeatureCollection'\n       * - {Array}  `features`: An array of feature objects\n       *\n       * Each feature object in the collection must have the following key/values:\n       *\n       * - {String} `type`: Must be 'Feature'\n       * - {Number} `id`: A unique numeric ID. If the feature is changed, it should keep its ID. No other features in the collection should have the same ID.\n       * - {Object} `geometry`\n       * - {String} `geometry.type`: Must be 'Point'\n       * - {Array}  `geometry.coordinates`: a pair of coordinates in `[lng,lat]` order\n       * - {Object} `properties`\n       * - {Object} `properties.marker-icon`: Settings to configure a marker icon\n       * - {Object} `properties.marker-popup`: [OPTIONAL] Settings to configure a marker icon\n       *\n       * @type {Object}\n       */\n      predictive: {\n        type: Object,\n        value() {\n          return {};\n        }\n      },\n      /**\n       * An object mapping categories of icons to their respective colors. Each\n       * key should be a string representing the name of an `icon-type` to\n       * a valid CSS color value (e.g. hex color, `rgb()` color). Set the\n       * `icon-type` as a sub-property of `properties.marker-icon` for each marker\n       * feature in the FeatureCollection you pass into the `data` attribute.\n       *\n       * By default, the available types are:\n       * - \"unknown\" : \"--px-map-icon-unknown-color\" (default: gray)\n       * - \"info\" : \"--px-map-icon-info-color\" (default: blue)\n       * - \"warning\" : \"--px-map-icon-warning-color\" (default: orange)\n       * - \"important\" : \"--px-map-icon-important-color\" (default: red)\n       * - \"custom-n\" : \"--px-map-color-custom-n\" (default: n/a)\n       *\n       * Example #1 - `colorsByType` object\n       *\n       * ```\n       * {\n       *   \"info\" : \"blue\",\n       *   \"warning\" : \"orange\",\n       *   \"important\" : \"red\",\n       *   \"unknown\" : \"gray\"\n       * }\n       * ```\n       *\n       * Example #2 - `colorsByType` object with custom types\n       *\n       * ```\n       * {\n       *   \"info\" : \"blue\",\n       *   \"custom-0\" : \"salmon\",\n       *   \"custom-1\" : \"lime\",\n       *   \"custom-2\" : \"crimson\"\n       * }\n       * ```\n       *\n       * @type {Object}\n       */\n      colorsByType: {\n        type: Object,\n        value(){\n          return {};\n        }\n      },\n      /**\n       * List of Regions in the map. Will be rendered in the button overlay.\n       * Clicking on the region will move the focus to the specific \n       * latitude and longitude in the map.\n       * \n       * Format: [{label: \"Region 1\", lat: 100, lng: 0, default: true}, {label: \"Region 2\", lat: -100, lng: 0}]\n       * @type {Array}\n       */\n      regions: {\n        type: Array,\n        value() {\n          return []\n        },\n        observer: '_selectDefaultRegion'\n      },\n      /**\n       * Allows advanced configurations of the cluster behaviors and styles. Note\n       * that the cluster comes pre-configured with settings that will work\n       * for most use cases; the `clusterConfig` allows those settings to be\n       * overriden but may cause unexpected behaviors when conflicting settings\n       * are used. Leave the default configuration (by not setting this attribute)\n       * if you're unsure of how to use it.\n       *\n       * The following settings are available:\n       *\n       * - {Boolean} `showCoverageOnHover`: [default=true] Shows the bounds of a cluster as a polygon when its icon is hovered\n       * - {Boolean} `zoomToBoundsOnClick`: [default=true] Zooms to bounds of a cluster when its icon is clicked\n       * - {Boolean} `spiderfyOnMaxZoom`: [default=true] Spiderfies the markers in a cluster when it is clicked at the max zoom level\n       * - {Boolean} `removeOutsideVisibleBounds`: [default=true] Removes cluster icons and markers when they are too far outside the visible map bounds\n       * - {Boolean} `animate`: [default=true] Animates cluster splitting, joining, zooming, and spiderfying\n       * - {Number} `disableClusteringAtZoom`: [default=undefined] If set, when the user zooms below this level markers will not be clustered (do not combine with `spiderfyOnMaxZoom`)\n       * - {Number} `maxClusterRadius`: [default=150] The maximum radius in pixels a cluster will cover from the central marker. Lower numbers make smaller clusters. Setting below the default may cause cluster icons to overlap.\n       * - {Object} `polygonOptions`: [default=150] Options passed to draw the cluster cover polygon\n       *   - {Boolean} `polygonOptions.stroke`: [default=true] If true the polygon will have a stroke line around the outside\n       *   - {String} `polygonOptions.color`: [default=--px-map-marker-group-cluster-polygon-stroke-color] Sets the stroke color, prefer setting with the style variable\n       *   - {String} `polygonOptions.fillColor`: [default=--px-map-marker-group-cluster-polygon-fill-color] Sets the fill color color, prefer setting with the style variable.\n       *   - {Number} `polygonOptions.fillOpacity`: [default=0.4] Sets the opacity of the polygon fill\n       * - {Object} `spiderLegPolylineOptions`: [default=undefined] Sets the style for the marker spiderfy legs, see [PolylineOptions](http://leafletjs.com/reference.html#polyline-options)\n       *\n       * @type {Object}\n       */\n      clusterConfig: {\n        type: Object,\n        value() {\n          return {}\n        }\n      },\n      contextPaneProportion: {\n        type: Number,\n        value: 0.3\n      },\n      hasRegions: {\n        type: Boolean,\n        computed: '_hasRegions(regions)',\n        value() {\n          return []\n        }\n      },\n      toggleMarginTop: {\n        type: String\n      },\n      toggleMarginLeft: {\n        type: String\n      }\n    },\n\n    attached() {\n      this.contextPaneOpen = false;\n      //Fixes unrendered regions\n      let me = this;\n      window.setTimeout(() => {\n        const zoomIn = document.querySelector(\"#map a.leaflet-control-zoom-in\");\n        const zoomOut = document.querySelector(\"#map a.leaflet-control-zoom-out\");\n        zoomIn && zoomIn.click();\n        zoomOut && zoomOut.click();\n        me.toggleMarginLeft = \n          document.querySelector(\"#map div.leaflet-control-zoom\").getBoundingClientRect().left;\n        me._adjustFilterHorizontalMargin();\n        me._adjustMapHeight(\n          document.querySelector(\"#map\").getBoundingClientRect().height);\n      }, 1000);\n    },\n\n    toggleContextPane() {\n      const currHeightNum = this.height.replace(/\\D/g, '');\n      const cpMinHeightPercentage = this.contextPaneProportion;\n      const mapHeightPercentage = (1 - cpMinHeightPercentage);\n      const mapOrigHeightPercentage = 1 + (2*cpMinHeightPercentage);\n      if(!this.contextPaneOpen) {\n        const newMapHeight = Math.ceil(currHeightNum * mapHeightPercentage);\n        this.height = this.height.replace(currHeightNum, newMapHeight);\n        this.contextPaneMinHeight = Math.ceil(currHeightNum * cpMinHeightPercentage);\n        this.contextPaneOpen = true;\n        this._adjustMapHeight(\n          document.querySelector('#map').offsetHeight * mapHeightPercentage); \n      } else {\n        this.height = this.defaultHeight;\n        this.contextPaneMinHeight = 0;\n        this.contextPaneMaxHeight = 0;\n        this.contextPaneOpen = false;\n        this._adjustMapHeight(document.querySelector('#map').offsetHeight);\n      }\n    },\n\n    invalidateSize() {\n      this.$.map.invalidateSize();\n    },\n\n    _isValidMarkerGroup(obj) {\n      return obj && obj.type;\n    },\n\n    _hasRegions(regions){\n      return regions && regions.length;\n    },\n    _focusRegion(evt) {\n      let eventDetail = evt.detail;\n      if(eventDetail.selected) {\n        let item = this.regions[eventDetail.key];\n        this.lat = item.lat;\n        this.lng = item.lng;\n        this.$.map.zoom = item.zoom || this.zoom;\n      }\n    },\n    _selectDefaultRegion() {\n      this.regionsDropdownData = [];\n      if(this.regions) {\n        this.regions.forEach((_region, idx) => {\n          let obj = _region;\n          obj.key = idx;\n          obj.val = _region.label\n          if(_region.default) {\n            this.lat = _region.lat;\n            this.lng = _region.lng;\n            obj.selected = true;\n          }\n          this.regionsDropdownData.push(obj);\n        });\n      }\n    },\n    _removePressed() {\n      this.upstreamPressedCls = undefined;\n      this.midstreamPressedCls = undefined;\n      this.downstreamPressedCls = undefined;\n      this.predictivePressedCls = undefined;\n    },\n    _backup(key) {\n      if(this[key] && this[key].type) {\n        this[`_${key}`] = this[key];\n        this[key] = undefined;\n        document.querySelector(`#${key}`).redraw();\n      }\n    },\n    _restore(key) {\n      const _key = `_${key}`;\n      if(this[_key] && this[_key].type) {\n        this[key] = this[_key];\n        this[_key] = undefined;\n        document.querySelector(`#${key}`).redraw();\n      }\n    },\n    _hideAll() {\n      this._removePressed();\n      this._backup('upstream');\n      this._backup('midstream');\n      this._backup('downstream');\n      this._backup('predictive');\n    },\n    _showAll() {\n      this._removePressed();\n      this._restore('upstream');\n      this._restore('midstream');\n      this._restore('downstream');\n      this._restore('predictive');\n    },\n    _toggleUpstreamOnly() {\n      if(!this.upstreamPressedCls) {\n        this._hideAll();\n        this.upstreamPressedCls = 'pressed';\n        this._restore('upstream');\n      } else {\n        this._showAll();\n      }\n    },\n    _toggleMidstreamOnly() {\n      if(!this.midstreamPressedCls) {\n        this._hideAll();\n        this.midstreamPressedCls = 'pressed';\n        this._restore('midstream');\n      } else {\n        this._showAll();\n      }\n    },\n    _toggleDownstreamOnly() {\n      if(!this.downstreamPressedCls) {\n        this._hideAll();\n        this.downstreamPressedCls = 'pressed';\n        this._restore('downstream');\n      } else {\n        this._showAll();\n      }\n    },\n    _togglePredictiveOnly() {\n      if(!this.predictivePressedCls) {\n        this._hideAll();\n        this.predictivePressedCls = 'pressed';\n        this._restore('predictive');\n      } else {\n        this._showAll();\n      }\n    },\n    _shouldHide(bool) {\n      return bool;\n    },\n    _adjustFilterHorizontalMargin(newWidth, oldWidth) {\n      const comp = document.querySelector(\"#map\");\n      if(comp) {\n        const widthNum = comp.getBoundingClientRect().width;\n        const toggleMarginLeft = -(widthNum * 0.043);\n        const filterMarginLeft = -(widthNum * 0.0135);\n        this.$.toggles.style.marginLeft = `${toggleMarginLeft}px`;\n        this.$.filter.style.marginLeft = `${filterMarginLeft}px`;\n      }\n      this.$.map.invalidateSize();\n    },\n    _adjustFilterVerticalMargin(newHeight, oldHeight) {\n      if(!oldHeight) {\n        this.defaultHeight = newHeight;\n      }\n      const comp = document.querySelector(\"#map\");\n      if(comp) {\n        this._adjustMapHeight(comp.getBoundingClientRect().height);\n      }\n    },\n    _adjustMapHeight(heightNum) {\n      if(heightNum) {\n        const toggleMarginTop = (heightNum * 0.25);\n        this.$.toggles.style.marginTop = `${toggleMarginTop}px`;\n      }\n    },\n    _compute(contextPaneOpen) {\n      return !contextPaneOpen;\n    },\n    _onIronResize() {\n      console.log(arguments, this.$.map);\n      this.$.map.invalidateSize();\n    }\n  });\n})();\n"]}