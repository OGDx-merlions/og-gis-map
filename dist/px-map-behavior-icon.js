'use strict';var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}/**
 * @license
 * Copyright (c) 2018, General Electric
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(function(){'use strict';/****************************************************************************
   * KLASSES
   ****************************************************************************//* Ensures the klass namespace is created */window.PxMap=window.PxMap||{};/**
   *
   * @class PxMap.StaticIcon
   */var StaticIcon=function(){function StaticIcon(){var settings=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,StaticIcon);this.icon=this.createIcon(settings);return this.icon}_createClass(StaticIcon,[{key:'createIcon',value:function createIcon(){var settings=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};// Extract `type` from settings with defaults
var _settings$type=settings.type,type=_settings$type===undefined?'info':_settings$type,styleScope=settings.styleScope,color=settings.color;var className=this._generateStaticIconClasses(type,styleScope);var customStyleBackground='';var customStyleBorder='';if(color){customStyleBackground='background-color: '+color+';';customStyleBorder='border-color: '+color+' transparent transparent;'}// Static options
var html=void 0;if(settings.featureProperties.title){html='\n          <div class="map-icon-static__wrapper">\n            <i class="map-icon-static__body" style="'+customStyleBackground+'"></i>\n            <i class="map-icon-static__descender" style="'+customStyleBorder+'"></i>\n            <i class="map-icon-static__badge"></i>\n            <div style="padding-top: 1.5rem; margin-left: -1rem; \n              color: black; padding-left: 1rem; font-size: 0.8rem;\n              line-height:0.7rem;">'+settings.featureProperties.title+'</div>\n          </div>\n        '}else{html='\n          <div class="map-icon-static__wrapper">\n            <i class="map-icon-static__body" style="'+customStyleBackground+'"></i>\n            <i class="map-icon-static__descender" style="'+customStyleBorder+'"></i>\n            <i class="map-icon-static__badge"></i>\n          </div>\n        '}var iconSize=L.point(23,31);var iconAnchor=L.point(7.6,31);var popupAnchor=L.point(1,-31);// Define the `divIcon` options
var options={className:className,html:html,iconSize:iconSize,iconAnchor:iconAnchor,popupAnchor:popupAnchor};return L.divIcon(options)}},{key:'_generateStaticIconClasses',value:function _generateStaticIconClasses(type,styleScope){var classes=['map-icon','map-icon-static','map-icon-static--with-badge'];if(type&&type.length){classes.push('map-icon-static--'+type)}if(styleScope){classes.push(styleScope)}return classes.join(' ')}}]);return StaticIcon}();;/* Bind StaticIcon klass */PxMap.StaticIcon=StaticIcon;/**
   *
   * @class PxMap.SymbolIcon
   */var SymbolIcon=function(){function SymbolIcon(){var settings=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,SymbolIcon);this.icon=this.createIcon(settings);return this.icon}_createClass(SymbolIcon,[{key:'createIcon',value:function createIcon(){var settings=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _settings$type2=settings.type,type=_settings$type2===undefined?'info':_settings$type2,_settings$icon=settings.icon,icon=_settings$icon===undefined?'px-nav:favorite':_settings$icon,styleScope=settings.styleScope,_settings$stroke=settings.stroke,stroke=_settings$stroke===undefined?'currentColor':_settings$stroke,_settings$fill=settings.fill,fill=_settings$fill===undefined?'none':_settings$fill,_settings$strokeWidth=settings.strokeWidth,strokeWidth=_settings$strokeWidth===undefined?'2px':_settings$strokeWidth,color=settings.color;var className=this._generateSymbolIconClasses(type,styleScope);var customStyleBackground='';var customStyleBorder='';if(color){customStyleBackground='background-color: '+color+';';customStyleBorder='border-color: '+color+' transparent transparent;'}// Icon/Symbol options
var html=void 0;if(settings.featureProperties.title){stroke='black';html='\n          <div class="map-icon-symbol__wrapper">\n            <i class="map-icon-symbol__body" style="'+customStyleBackground+'">\n              <div class="map-icon-symbol__symbol--container flex flex--middle flex--center">\n                <px-icon icon="'+icon+'" style="stroke:'+stroke+'; fill:'+fill+'; width:100%; height:100%; stroke-width:'+strokeWidth+'"></px-icon>\n              </div>\n            </i>\n            <i class="map-icon-symbol__descender" style="'+customStyleBorder+'"></i>\n            <i class="map-icon-symbol__badge"></i>\n            <div style="padding-top: 3.5rem; margin-left: -1rem; \n              color: black; padding-left: 1rem; font-size: 0.8rem;\n              line-height:0.7rem;">'+settings.featureProperties.title+'</div>\n          </div>\n        '}else{html='\n        <div class="map-icon-symbol__wrapper">\n          <i class="map-icon-symbol__body" style="'+customStyleBackground+'">\n            <div class="map-icon-symbol__symbol--container flex flex--middle flex--center">\n              <px-icon icon="'+icon+'" style="stroke:'+stroke+'; fill:'+fill+'; width:100%; height:100%; stroke-width:'+strokeWidth+'"></px-icon>\n            </div>\n          </i>\n          <i class="map-icon-symbol__descender" style="'+customStyleBorder+'"></i>\n          <i class="map-icon-symbol__badge"></i>\n        </div>\n        '}var iconSize=L.point(40,56);var iconAnchor=L.point(19.6,57);var popupAnchor=L.point(1,-58);// Define the `divIcon` options
var options={className:className,html:html,iconSize:iconSize,iconAnchor:iconAnchor,popupAnchor:popupAnchor};return L.divIcon(options)}},{key:'_generateSymbolIconClasses',value:function _generateSymbolIconClasses(type,styleScope){var classes=['map-icon','map-icon-symbol','map-icon-symbol--with-badge'];if(type&&type.length){classes.push('map-icon-symbol--'+type)}if(styleScope){classes.push(styleScope)}return classes.join(' ')}}]);return SymbolIcon}();;/* Bind SymbolIcon klass */PxMap.SymbolIcon=SymbolIcon;/**
   *
   * @class PxMap.ClusterIcon
   */var ClusterIcon=function(){function ClusterIcon(){var settings=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,ClusterIcon);this.icon=this.createIcon(settings);return this.icon}_createClass(ClusterIcon,[{key:'createIcon',value:function createIcon(){var settings=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};// Extract `count`, `countByType`, `colorsByType`
var count=settings.count,countByType=settings.countByType,colorsByType=settings.colorsByType,_settings$containerSi=settings.containerSize,containerSize=_settings$containerSi===undefined?50:_settings$containerSi,_settings$pathSize=settings.pathSize,pathSize=_settings$pathSize===undefined?10:_settings$pathSize,_settings$borderSize=settings.borderSize,borderSize=_settings$borderSize===undefined?0:_settings$borderSize,_settings$className=settings.className,className=_settings$className===undefined?'':_settings$className,styleScope=settings.styleScope,markers=settings.markers;// The chart size is the container size with the border size subtracted out,
// so we can draw and transform our SVG in the right dimensions
var chartSize=containerSize-(borderSize>0?borderSize*2-0.5:0);// The icon size is a point representing the size of the icon's outer container
var iconSize=L.point(containerSize,containerSize);var markerTypeArray=this._getOilGasRefCount(markers);var _markerTypeArray=_slicedToArray(markerTypeArray,3),oil=_markerTypeArray[0],gas=_markerTypeArray[1],ref=_markerTypeArray[2];var id=new Date().getTime();var regionLabel=oil.label||gas.label||ref.label||'';// Generate the classes and wrapper HTML
var classes='map-icon-cluster '+(className||'')+' '+(styleScope||'');var tooltipMsgHtml='\n        <div style="width: 200%">\n          <div>\n            <span style="padding-right: 3rem;">'+regionLabel+'</span>\n            <b>'+(oil.production+gas.production+ref.production)+' BOE/day</b>\n          </div>\n          <div style="display: inline-block; padding-top: 1rem;">\n            <span style="padding-right: 1rem;">\n              <px-icon icon="px-obj:line-og"></px-icon>\n              <span style="font-weight: bold; font-size: 2rem;">'+oil.count+'</span>\n            </span>\n            <span style="padding-right: 1rem;">\n              <px-icon icon="px-obj:boiler"></px-icon>\n              <span style="font-weight: bold; font-size: 2rem;">'+gas.count+'</span>\n            </span>\n            <span style="padding-right: 1rem;">\n              <px-icon icon="px-obj:hrsg"></px-icon>\n              <span style="font-weight: bold; font-size: 2rem;">'+ref.count+'</span>\n            </span>\n          </div>\n        </div>\n      ';// Get the SVG for this icon
var svg=this._generateClusterIconSVG(countByType,colorsByType,chartSize,pathSize,oil,gas,ref,regionLabel);var html='\n        <px-tooltip\n          style="margin: 2rem;"\n          for="cluster-'+id+'"\n          orientation="auto">\n          '+tooltipMsgHtml+'\n        </px-tooltip>  \n        <i class="map-icon-cluster__svg">'+svg+'</i>\n      ';// Define the `divIcon` options
var options={iconSize:iconSize,className:classes,html:html};return L.divIcon(options)}},{key:'_getOilGasRefCount',value:function _getOilGasRefCount(markers){var oil={'count':0,'type':'unknown','production':0,'icon':'px-obj:line-og','label':''},gas={'count':0,'type':'unknown','production':0,'icon':'px-obj:boiler','label':''},ref={'count':0,'type':'unknown','production':0,'icon':'px-obj:hrsg','label':''};var cluster=void 0;var updateTypeIfHigher=function updateTypeIfHigher(obj,marker){if(marker['marker-icon']&&marker['marker-icon']['icon-type']){var iconType=marker['marker-icon']['icon-type'];if('warning'==iconType&&obj.type!=='important'){obj.type='warning'}else if('important'==iconType){obj.type='important'}else if('info'==iconType&&obj.type=='unknown'){obj.type='info'}}};markers.forEach(function(_m){cluster=_m.featureProperties.cluster;if(cluster){if('oil'===cluster.type){++oil.count;oil.production+=cluster.production;oil.label=cluster.label;updateTypeIfHigher(oil,_m.featureProperties)}else if('gas'===cluster.type){++gas.count;gas.production+=cluster.production;gas.label=cluster.label;updateTypeIfHigher(gas,_m.featureProperties)}else if('ref'===cluster.type){++ref.count;ref.production+=cluster.production;ref.label=cluster.label;updateTypeIfHigher(ref,_m.featureProperties)}}});return[oil,gas,ref]}},{key:'_generateClusterIconSVG',value:function _generateClusterIconSVG(countByType,colorsByType,chartSize,pathSize,oil,gas,ref,regionLabel){// Combine the `countByType` and `colorsByType` into one array of objects,
// each describing a type with its associated count and color
var typeKeys=Object.keys(countByType);var typeObjs=typeKeys.map(function(type){return{type:type,count:countByType[type],color:colorsByType[type]}});// Sort the types from highest->lowest
typeObjs.sort(function(a,b){return a.count-b.count});// Create two parallel arrays of [types] and [colors]
var types=[];var colors=[];var i=void 0,len=void 0,type=void 0,total=void 0;for(i=0,len=typeKeys.length;i<len;i++){type=typeKeys[i];total=countByType[type];types.push(countByType[type]);colors.push(colorsByType[type])}// Return the pie chart
return this.createPieChart(types,colors,chartSize,pathSize,oil,gas,ref,regionLabel)}},{key:'createPieChart',value:function createPieChart(groupsArray,colorsArray,chartSize,pathSize,oil,gas,ref,regionLabel){console.log(oil,regionLabel);// Create a pie generator and pass it the `groupsArray` to create a set
// of arcs we can draw as a donut pie cart
var pieGeneratorFn=Px.d3.pie();var arcData=pieGeneratorFn(groupsArray);// Calculate the `radius` and `innerRadius` of the chart
var radius=chartSize/2;var innerRadius=radius-pathSize;// Create a path generator. Individual entries of `arcData` can be passed
// in to the path geneator to yield a stringified path that can be
// appended to a `<path>` tag's `d` attribute.
var arcPathGeneratorFn=Px.d3.arc().outerRadius(radius).innerRadius(innerRadius);// Iterate over a list of `arcData` entries and return a block of paths
var pathListTmpl=function pathListTmpl(paths){return paths.map(pathTmpl).join('')};// For each path, generate a `<path>` tag with the correct attributes
var pathTmpl=function pathTmpl(pathData,pathIndex){return'<path d="'+arcPathGeneratorFn(pathData)+'" fill="'+colorsArray[pathIndex]+'" opacity="1"></path>'};// return `
//   <svg xmlns="http://www.w3.org/2000/svg" version="1.1" preserveAspectRatio="none" viewBox="0 0 ${chartSize} ${chartSize}">
//       <g transform="translate(${radius}, ${radius})">
//           ${pathListTmpl(arcData)}
//       </g>
//   </svg>
// `;
var id=new Date().getTime();var col=regionLabel=='Reggane'?'#be4748':'#679f00';return'\n      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" preserveAspectRatio="none" width="131px" height="109px" viewBox="0 0 140 120">\n      <g id="MOP-'+id+'" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="1a.-Ministry-dashboard-Copy-3-'+id+'" transform="translate(-1113.000000, -429.000000)">\n            <g id="Group-2-'+id+'" transform="translate(1114.000000, 430.000000)">\n                <circle id="Oval-4-'+id+'" stroke="#9B9B9B" stroke-width="2" cx="60.5" cy="39.5" r="36.5"></circle>\n                <g id="Group-Copy-7-'+id+'" transform="translate(0.000000, 22.000000)">\n                    <text id="Eastern-Desert-'+id+'" font-family="GEInspiraSans-Regular, GE Inspira Sans" font-size="15" font-weight="normal" fill="#4A4A4A">\n                        <tspan x="75" y="65">'+regionLabel+'</tspan>\n                    </text>\n                    <circle id="Oval-3-'+id+'" stroke="#9B9B9B" fill="'+col+'" cx="22.5" cy="41.5" r="22.5"></circle>\n                    <text id="12-'+id+'" font-family="GEInspiraSans-Regular, GE Inspira Sans" font-size="36" font-weight="normal" fill="#59717F">\n                        <tspan x="45.848" y="28">'+oil.count+'</tspan>\n                    </text>\n                </g>\n            </g>\n        </g>\n      </g>\n      </svg>'}}]);return ClusterIcon}();;/* Bind ClusterIcon klass */PxMap.ClusterIcon=ClusterIcon})();
//# sourceMappingURL=px-map-behavior-icon.js.map
