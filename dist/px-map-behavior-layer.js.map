{"version":3,"sources":["px-map-behavior-layer.es6.js"],"names":["window","PxMapBehavior","LayerImpl","attached","notifyInstReady","canAddInst","detached","shouldRemoveInst","shouldAddInst","parentInst","parentEl","ElementImpl","call","elementInst","__parentEl","addInst","parent","removeInst","_dereferenceChild","addLayer","remove","Layer","Element","ParentLayerImpl","listeners","created","_attachedChildren","WeakMap","_detachLayerChildren","_tryToAddAllChildren","evt","localEvt","Polymer","dom","rootTarget","_attachLayerChildren","_tryToAddOneChild","stopPropagation","_attachLayerChild","children","getEffectiveChildren","length","forEach","child","childEl","has","set","async","_detachLayerChild","delete","ParentLayer"],"mappings":"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","file":"px-map-behavior-layer.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018, General Electric\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /****************************************************************************\n   * BEHAVIORS\n   ****************************************************************************/\n\n  /* Ensures the behavior namespace is created */\n  window.PxMapBehavior = (window.PxMapBehavior || {});\n\n  /**\n   *\n   *\n   * @polymerBehavior PxMapBehavior.Layer\n   */\n  PxMapBehavior.LayerImpl = {\n    // When this element is attached to the DOM, fire an event to notify\n    // a parent that it is ready\n\n    attached() {\n      this.notifyInstReady(this.canAddInst());\n    },\n\n    // When this element is detached from the DOM, its elementInst should be\n    // removed from the parent\n\n    detached() {\n      this.shouldRemoveInst();\n    },\n\n    // Extends the `Element` behavior lifecycle methods to include adding the\n    // instance to its parent\n\n    shouldAddInst(parentInst, parentEl) {\n      PxMapBehavior.ElementImpl.shouldAddInst.call(this, parentInst);\n\n      if (this.elementInst && parentInst) {\n        this.__parentEl = parentEl;\n        this.addInst(parentInst);\n      };\n    },\n\n    shouldRemoveInst(parent) {\n      PxMapBehavior.ElementImpl.shouldRemoveInst.call(this, parent);\n\n      if (this.elementInst) {\n        this.removeInst(parent);\n      };\n      if (this.__parentEl && this.__parentEl._dereferenceChild) {\n        this.__parentEl._dereferenceChild.call(this.__parentEl, this);\n      }\n      this.__parentEl = null;\n    },\n\n    // Methods to bind to/unbind from parent\n\n    addInst(parent) {\n      parent.addLayer(this.elementInst);\n    },\n\n    removeInst(parent) {\n      this.elementInst.remove();\n    },\n\n    /**\n     * Some element instances may require a minimum number of defined options\n     * to be able to attach to their parent. If those options are defined via.\n     * attributes, they may not be deserialized or even set before the `willAddInst`\n     * method is called.\n     *\n     * Elements that need to defer until some options are set should override\n     * the `canAddInst` method and return `false` if the method\n     *\n     * Elements that may need to defer until some options are ready should\n     * override `instReady` and set it to `false` by default.\n     *\n     * Later, when the `updateInst` function is called, the element should check\n     * if all required options are set and call the method `this.notifyInstReady(true)`\n     * to trigger an event the parent will catch and use to attach this element.\n     */\n    canAddInst() {\n      return true;\n    }\n  };\n  /* Bind Layer behavior */\n  /** @polymerBehavior */\n  PxMapBehavior.Layer = [\n    PxMapBehavior.Element,\n    PxMapBehavior.LayerImpl\n  ];\n\n  /**\n   *\n   *\n   * @polymerBehavior PxMapBehavior.ParentLayer\n   */\n  PxMapBehavior.ParentLayerImpl = {\n    listeners: {\n      'px-map-element-instance-created' : '_tryToAddAllChildren',\n      'px-map-element-ready-to-add' : '_tryToAddOneChild'\n    },\n\n    created() {\n      // Use a WeakMap to keep track of our attached children\n      this._attachedChildren = this._attachedChildren || new WeakMap();\n    },\n\n    detached() {\n      this._detachLayerChildren();\n    },\n\n    // Handles attaching children throughout this element's lifecycle\n\n    _tryToAddAllChildren(evt) {\n      // If this element's elementInst isn't ready, halt and wait until later\n      // If this event isn't coming from this element, do not handle\n      const localEvt = Polymer.dom(evt);\n      if (!this.elementInst || localEvt.rootTarget !== this) return;\n\n      // If my own elementInst was just created, loop over children and try to attach them\n      this._attachLayerChildren();\n    },\n\n    _tryToAddOneChild(evt) {\n      // If the added-to-dom event belongs to this element, just return and let it bubble\n      const localEvt = Polymer.dom(evt);\n      if (localEvt.rootTarget === this) return;\n\n      // This element is the parent, so stop this event from bubbling\n      evt.stopPropagation();\n\n      // If I have no elementInst, halt and wait until later\n      if (!this.elementInst) return;\n\n      this._attachLayerChild(localEvt.rootTarget);\n    },\n\n    _attachLayerChildren() {\n      const children = this.getEffectiveChildren();\n      if (!children || !children.length) return;\n\n      children.forEach(child => {\n        this._attachLayerChild(child);\n      });\n    },\n\n    _attachLayerChild(childEl) {\n      if (this._attachedChildren.has(childEl) || !childEl.shouldAddInst || !childEl.canAddInst || !childEl.canAddInst()) return;\n      this._attachedChildren.set(childEl, true);\n\n      this.async(() => { childEl.shouldAddInst(this.elementInst, this); });\n    },\n\n    // Handles detaching children throughout this element's lifecycle\n\n    _detachLayerChildren() {\n      const children = this.getEffectiveChildren();\n      if (!children || !children.length) return;\n\n      children.forEach(child => {\n        this._detachLayerChild(child);\n      });\n    },\n\n    _detachLayerChild(childEl) {\n      if (!this._attachedChildren.has(childEl) || !childEl.shouldRemoveInst) return;\n      this._attachedChildren.delete(childEl);\n\n      this.async(() => { childEl.shouldRemoveInst(this.elementInst, this); });\n    },\n\n    _dereferenceChild(childEl) {\n      // If no attached children map or if this item is not in the map, halt\n      if (!this._attachedChildren || !this._attachedChildren.has(childEl)) return;\n\n      this._attachedChildren.delete(childEl);\n    }\n  };\n  /* Bind ParentLayer behavior */\n  /** @polymerBehavior */\n  PxMapBehavior.ParentLayer = [PxMapBehavior.ParentLayerImpl];\n})();\n"]}